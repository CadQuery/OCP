parameters:
  name: 'Generate bindings'
  vmImage: 'ubuntu-latest'
  py_maj: '3'
  py_min: '11'
  py_min_build:
  - 9
  - 10
  - 11
  - 12
  config_file: 'ocp.toml'
  conda_bld: '3.27.0'
  conda_env_file: 'environment.devenv.yml'
  CXX: g++-13

jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 360
  pool:
    vmImage: ${{ parameters.vmImage }}
  variables:
    n_cores: 2
  steps:
  - checkout: self
    submodules: true

  - ${{ if contains(parameters.vmImage, 'Ubuntu') }}:
    - bash: sudo apt-get update && sudo apt-get install ${{ parameters.CXX }} mesa-common-dev libegl1-mesa-dev libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev
      displayName: 'Install gl headers'

  - ${{ if contains(parameters.vmImage, 'mac') }}:
    - bash: |
        curl -L -O https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.3.sdk.tar.xz && \
        sudo mkdir -p /opt && \
        sudo tar -xf MacOSX11.3.sdk.tar.xz -C /opt && \
        sudo mkdir -p /opt/usr/local/ && \
        sudo ln -s /opt/MacOSX11.3.sdk/usr/include /opt/usr/local/include && \
        sudo ln -s /opt/MacOSX11.3.sdk/System/Library/Frameworks/OpenGL.framework/Headers /usr/local/include/OpenGL
      displayName: 'SDK install and symlink'

  - template: conda-enable.yml@templates
    parameters:
      python: 3.12
      mamba: 1.5
      vmImage: ${{ parameters.vmImage }}

  - bash: |
      mamba run mamba-devenv -f ${{ parameters.conda_env_file }}
    displayName: 'Prepare conda environment'

  - bash: |
      source activate cpp-py-bindgen && \
      conda info -a && \
      conda list && \
      which python && \
      env
    displayName: 'Conda env sanity checks'

  - bash: |
      source activate cpp-py-bindgen && \
      OUTPUT=`python -c'import toml; print(toml.load("${{ parameters.config_file }}")["output_folder"])'`  && \
      echo $OUTPUT && \
      echo "##vso[task.setvariable variable=OUTPUT;isOutput=true]$OUTPUT"
    displayName: 'Read output dir from the config file'
    name: 'conf'

  - bash: |
      source activate cpp-py-bindgen && \
      cmake -DPython_ROOT_DIR=$CONDA_PREFIX -DPython3_ROOT_DIR=$CONDA_PREFIX -DPython_FIND_VIRTUALENV=ONLY -DPython3_FIND_VIRTUALENV=ONLY -B . -S . -G Ninja && \
      cmake --build .
    displayName: 'CMake based pywrap call'
    name: 'Generate'

  - task: CopyFiles@2
    inputs:
      contents: '*.pkl'
      targetFolder: $(conf.OUTPUT)_pkl
    displayName: 'Copy pkl outputs'

  - publish:  $(conf.OUTPUT)
    artifact: OCP_src_${{ parameters.vmImage }}

  - publish:  $(conf.OUTPUT)_pkl
    artifact: OCP_pkl_${{ parameters.vmImage }}

- ${{ each py_min in parameters.py_min_build }}:
  - job: ${{ parameters.name }}_${{ parameters.py_maj }}_${{ py_min }}
    timeoutInMinutes: 360
    dependsOn: ${{ parameters.name }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    variables:
      n_cores: 2
      OCP_src: OCP_src_${{ parameters.vmImage }}
    steps:
    - download: current
      artifact: OCP_src_${{ parameters.vmImage }}

    - ${{ if contains(parameters.vmImage, 'Ubuntu') }}:
      - bash: sudo apt-get update && sudo apt-get install mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev
        displayName: 'Install gl headers and the requested compiler'

    - ${{ if contains(parameters.vmImage, 'mac') }}:
      - bash: |
          curl -L -O https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX10.15.sdk.tar.xz && \
          sudo mkdir -p /opt && \
          sudo tar -xf MacOSX10.15.sdk.tar.xz -C /opt
        displayName: 'SDK install'

    - template: conda-enable.yml@templates
      parameters:
        python: 3.12
        mamba: 1.5
        vmImage: ${{ parameters.vmImage }}

    - bash: |
        mamba-devenv -f  ${{ parameters.conda_env_file }}
      displayName: 'Prepare conda environment'
      env:
        PYTHON_VERSION: ${{ parameters.py_maj }}.${{ py_min }}
        STAGE: "compile"

    - ${{ if contains(parameters.vmImage, 'Ubuntu') }}:
      - bash: |
          source activate cpp-py-bindgen && \
          mamba list && \
          cmake -B build -S "../$(OCP_src)" -G Ninja -DCMAKE_BUILD_TYPE=Release  && \
          cmake --build build -j $(n_cores) -- -k 0 && \
          rm -rf build/CMakeFiles
        displayName: 'Compile'

    - ${{ if contains(parameters.vmImage, 'mac') }}:
      - bash: |
          source activate cpp-py-bindgen && \
          cmake -B build -S "../$(OCP_src)" -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_SYSROOT=/opt/MacOSX10.15.sdk/ && \
          cmake --build build -j $(n_cores) -- -k 0 && \
          rm -rf build/CMakeFiles
        displayName: 'Compile'


    - ${{ if contains(parameters.vmImage, 'win') }}:
      - script: |
          call activate cpp-py-bindgen
          cmake -B build -S "../$(OCP_src)" -G Ninja -DCMAKE_BUILD_TYPE=Release -DPython3_FIND_STRATEGY=LOCATION -DPython3_ROOT_DIR=%CONDA_PREFIX% -DCMAKE_LINKER=lld-link.exe
          cmake --build build -j 1 -- -v -k 0
          rmdir /S /Q build\CMakeFiles
        displayName: 'Compile'
        env:
          CXX: "cl.exe"

    - bash: |
        source activate cpp-py-bindgen && \
        cd build && \
        python -m pybind11_stubgen -o . OCP && \
        rm -rf OCP-stubs/setup.py OCP-stubs/__pycache__ OCP-stubs/MANIFEST.in && \
        cp -r "../../$(OCP_src)" ../upload && \
        cp -r OCP-stubs ../upload
      displayName: 'Generate stubs and prepare for upload'

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'upload'
        artifactName: OCP_src_stubs_${{ parameters.vmImage }}
      displayName: 'Publish stubs and sources together'

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'build'
        artifactName: OCP_${{ parameters.vmImage }}
      displayName: 'Publish compilation result'

    - bash: |
        source activate cpp-py-bindgen && \
        cd build && \
        LD_DEBUG=libs python -c"import OCP"
      displayName: 'Test'

    - bash: |
          conda create -n build -y -c conda-forge python=3.11 liblief=0.14.1 conda-build anaconda-client && \
          source activate build && \
          conda build --token $TOKEN --user cadquery --label dev -c conda-forge --override-channels conda
      displayName: 'Build conda package'
      condition: ne(variables['Build.Reason'], 'PullRequest')
      env:
        BUILD_STRING: "1"
        PYTHON_VERSION: ${{ parameters.py_maj }}.${{ py_min }}
        TOKEN: $(anaconda.TOKEN)

    - bash: |
          conda create -n build -y -c conda-forge python=3.11 liblief=0.14.1 conda-build anaconda-client && \
          source activate build && \
          conda build -c conda-forge --override-channels conda
      displayName: 'Build conda package'
      condition: eq(variables['Build.Reason'], 'PullRequest')
      env:
        BUILD_STRING: "1"
        PYTHON_VERSION: ${{ parameters.py_maj }}.${{ py_min }}
        TOKEN: $(anaconda.TOKEN)
